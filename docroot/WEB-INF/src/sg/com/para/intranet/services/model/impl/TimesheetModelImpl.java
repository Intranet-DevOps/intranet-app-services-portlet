/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sg.com.para.intranet.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import sg.com.para.intranet.services.model.Timesheet;
import sg.com.para.intranet.services.model.TimesheetModel;
import sg.com.para.intranet.services.model.TimesheetSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Timesheet service. Represents a row in the &quot;intranet_Timesheet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link sg.com.para.intranet.services.model.TimesheetModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimesheetImpl}.
 * </p>
 *
 * @author Fernando Karnagi
 * @see TimesheetImpl
 * @see sg.com.para.intranet.services.model.Timesheet
 * @see sg.com.para.intranet.services.model.TimesheetModel
 * @generated
 */
@JSON(strict = true)
public class TimesheetModelImpl extends BaseModelImpl<Timesheet>
	implements TimesheetModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a timesheet model instance should use the {@link sg.com.para.intranet.services.model.Timesheet} interface instead.
	 */
	public static final String TABLE_NAME = "intranet_Timesheet";
	public static final Object[][] TABLE_COLUMNS = {
			{ "timesheetId", Types.INTEGER },
			{ "employeeId", Types.INTEGER },
			{ "logDate", Types.TIMESTAMP },
			{ "logType", Types.VARCHAR },
			{ "hours", Types.DOUBLE },
			{ "projectId", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table intranet_Timesheet (timesheetId INTEGER not null primary key,employeeId INTEGER,logDate DATE null,logType VARCHAR(75) null,hours DOUBLE,projectId INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table intranet_Timesheet";
	public static final String ORDER_BY_JPQL = " ORDER BY timesheet.timesheetId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY intranet_Timesheet.timesheetId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.sg.com.para.intranet.services.model.Timesheet"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.sg.com.para.intranet.services.model.Timesheet"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Timesheet toModel(TimesheetSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Timesheet model = new TimesheetImpl();

		model.setTimesheetId(soapModel.getTimesheetId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setLogDate(soapModel.getLogDate());
		model.setLogType(soapModel.getLogType());
		model.setHours(soapModel.getHours());
		model.setProjectId(soapModel.getProjectId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Timesheet> toModels(TimesheetSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Timesheet> models = new ArrayList<Timesheet>(soapModels.length);

		for (TimesheetSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.sg.com.para.intranet.services.model.Timesheet"));

	public TimesheetModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _timesheetId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setTimesheetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _timesheetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Timesheet.class;
	}

	@Override
	public String getModelClassName() {
		return Timesheet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("timesheetId", getTimesheetId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("logDate", getLogDate());
		attributes.put("logType", getLogType());
		attributes.put("hours", getHours());
		attributes.put("projectId", getProjectId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer timesheetId = (Integer)attributes.get("timesheetId");

		if (timesheetId != null) {
			setTimesheetId(timesheetId);
		}

		Integer employeeId = (Integer)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Date logDate = (Date)attributes.get("logDate");

		if (logDate != null) {
			setLogDate(logDate);
		}

		String logType = (String)attributes.get("logType");

		if (logType != null) {
			setLogType(logType);
		}

		Double hours = (Double)attributes.get("hours");

		if (hours != null) {
			setHours(hours);
		}

		Integer projectId = (Integer)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}
	}

	@JSON
	@Override
	public int getTimesheetId() {
		return _timesheetId;
	}

	@Override
	public void setTimesheetId(int timesheetId) {
		_timesheetId = timesheetId;
	}

	@JSON
	@Override
	public int getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(int employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public Date getLogDate() {
		return _logDate;
	}

	@Override
	public void setLogDate(Date logDate) {
		_logDate = logDate;
	}

	@JSON
	@Override
	public String getLogType() {
		if (_logType == null) {
			return StringPool.BLANK;
		}
		else {
			return _logType;
		}
	}

	@Override
	public void setLogType(String logType) {
		_logType = logType;
	}

	@JSON
	@Override
	public double getHours() {
		return _hours;
	}

	@Override
	public void setHours(double hours) {
		_hours = hours;
	}

	@JSON
	@Override
	public int getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(int projectId) {
		_projectId = projectId;
	}

	@Override
	public Timesheet toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Timesheet)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TimesheetImpl timesheetImpl = new TimesheetImpl();

		timesheetImpl.setTimesheetId(getTimesheetId());
		timesheetImpl.setEmployeeId(getEmployeeId());
		timesheetImpl.setLogDate(getLogDate());
		timesheetImpl.setLogType(getLogType());
		timesheetImpl.setHours(getHours());
		timesheetImpl.setProjectId(getProjectId());

		timesheetImpl.resetOriginalValues();

		return timesheetImpl;
	}

	@Override
	public int compareTo(Timesheet timesheet) {
		int primaryKey = timesheet.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Timesheet)) {
			return false;
		}

		Timesheet timesheet = (Timesheet)obj;

		int primaryKey = timesheet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Timesheet> toCacheModel() {
		TimesheetCacheModel timesheetCacheModel = new TimesheetCacheModel();

		timesheetCacheModel.timesheetId = getTimesheetId();

		timesheetCacheModel.employeeId = getEmployeeId();

		Date logDate = getLogDate();

		if (logDate != null) {
			timesheetCacheModel.logDate = logDate.getTime();
		}
		else {
			timesheetCacheModel.logDate = Long.MIN_VALUE;
		}

		timesheetCacheModel.logType = getLogType();

		String logType = timesheetCacheModel.logType;

		if ((logType != null) && (logType.length() == 0)) {
			timesheetCacheModel.logType = null;
		}

		timesheetCacheModel.hours = getHours();

		timesheetCacheModel.projectId = getProjectId();

		return timesheetCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{timesheetId=");
		sb.append(getTimesheetId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", logDate=");
		sb.append(getLogDate());
		sb.append(", logType=");
		sb.append(getLogType());
		sb.append(", hours=");
		sb.append(getHours());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("sg.com.para.intranet.services.model.Timesheet");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>timesheetId</column-name><column-value><![CDATA[");
		sb.append(getTimesheetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logDate</column-name><column-value><![CDATA[");
		sb.append(getLogDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logType</column-name><column-value><![CDATA[");
		sb.append(getLogType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hours</column-name><column-value><![CDATA[");
		sb.append(getHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Timesheet.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Timesheet.class
		};
	private int _timesheetId;
	private int _employeeId;
	private Date _logDate;
	private String _logType;
	private double _hours;
	private int _projectId;
	private Timesheet _escapedModel;
}